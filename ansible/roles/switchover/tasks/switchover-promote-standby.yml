# assume the db is already there and synched, so now want to turn into a standby / replica
# and want to turn the current standby into the primary
--- 
    - name: Restart service postgres (primary)
      ansible.builtin.systemd_service:
        name: postgresql
        state: restarted
      become: true
      delegate_to: '{{ primary_ip }}'
      remote_user: ubuntu

    # try to avoid issue: https://github.com/EnterpriseDB/repmgr/issues/703
    - name: Restart service postgres
      ansible.builtin.systemd_service:
        name: postgresql
        state: restarted
      become: true
      delegate_to: '{{ standby_ip }}'
      remote_user: ubuntu

    # can now just do this with repmgr
    # https://www.repmgr.org/docs/current/preparing-for-switchover.html
    # need the two instances to be able to ssh to each other!
    # siblings-follow only really needed if have multiple standbys...
    - name: Dry run of switching the standby and primary
      ansible.builtin.command: repmgr standby switchover -f /etc/repmgr.conf --siblings-follow --dry-run
      become: true
      become_user: postgres
      delegate_to: '{{ standby_ip }}'
      remote_user: ubuntu
      register: switchover_dry_run_results
    - name: Print out the switchover_dry_run_results
      ansible.builtin.debug:
        msg: "repmgr {{ switchover_dry_run_results }}"
    ## see preparing for switchover if things go wrong despite dry run, there is mention of --force-rewind
    ## which would use pg_rewind to try to fix divergent timelines...

    ## https://www.repmgr.org/docs/current/switchover-execution.html
    ## https://www.repmgr.org/docs/current/switchover-troubleshooting.html
    - name: Switch the standby and primary
      ansible.builtin.command: repmgr standby switchover -f /etc/repmgr.conf --siblings-follow
      become: true
      become_user: postgres
      delegate_to: '{{ standby_ip }}'
      remote_user: ubuntu
      register: switchover_results
    - name: Print out the switchover_results
      ansible.builtin.debug:
        msg: "repmgr {{ switchover_results }}"

    - name: Check cluster
      ansible.builtin.command: repmgr -f /etc/repmgr.conf cluster show
      become: true
      become_user: postgres
      delegate_to: '{{ standby_ip }}'
      remote_user: ubuntu
      register: status_results
    - name: Print out the status_results
      ansible.builtin.debug:
        msg: "repmgr {{ status_results }}"

# Switch over the primary's particular floating ip
# this makes sense to do after successfully switching over,
# however it means that the stuff writing to the primary needs to be
# robust enough to handle getting told the db is in a read only state for a short period.
    - name: Move primary floating ip
      block:
      # remove from old primary
      - name: Detach floating ip address that we keep connected to the primary
        openstack.cloud.floating_ip:
          cloud: '{{ ostack_cloud }}'
          region_name: '{{ ostack_region }}'
          server: '{{ name_primary }}'
          state: absent
          network: public
          floating_ip_address: '{{ primary_floating_ip }}'

      - name: Gather information about new primary server
        openstack.cloud.server_info:
          cloud: '{{ ostack_cloud }}'
          region_name: '{{ ostack_region }}'
          name: '{{ name_standby }}'
        register: new_primary_server

      - name: Print out the ipalias port information for the server
        ansible.builtin.debug:
          msg: "Server {{ new_primary_server.servers[0].addresses.ipalias }}"

      # add to what is now primary (used to be standby)
      - name: Attach floating ip address that we keep connected to the primary
        openstack.cloud.floating_ip:
          cloud: '{{ ostack_cloud }}'
          region_name: '{{ ostack_region }}'
          server: '{{ new_primary_server.servers[0].id }}'
          state: present
          reuse: true
          network: public
          fixed_address: '{{ new_primary_server.servers[0].addresses.ipalias[0].addr }}'
          floating_ip_address: '{{ primary_floating_ip }}'
          wait: true
          timeout: 60
        when: new_primary_server.servers[0].addresses.ipalias | length <=1
      # unfortunately it seems that attaching the floating ip results in a timeout      
      # even though it actually succeeds 
      ignore_errors: true

    - name: Check floating ip is attached
      openstack.cloud.floating_ip_info:
        cloud: '{{ ostack_cloud }}'
        region_name: '{{ ostack_region }}'
        floating_ip_address: '{{ primary_floating_ip }}'
      register: fip 

    # this will not run if the ip is not now on the right vm
    - name: Print out the floating ip information to confirm its ok
      ansible.builtin.debug:
        msg: "Floating ip {{ fip }}"
      become: true
      when: fip.floating_ips[0].port_details.device_id == new_primary_server.servers[0].id