---
- name: Perform IP switchover
  ansible.builtin.import_role:
    name: ostack
    tasks_from: move_floating_ip.yml
  vars:
    ostack_primary: "{{ failover_old }}"
    ostack_standby: "{{ failover_new }}"
  delegate_to: localhost
  tags: promote

- name: Promote
  tags: promote
  when: inventory_hostname == failover_new
  block:
    - name: Check cluster
      ansible.builtin.command: repmgr cluster show
      become: true
      become_user: postgres
      register: cluster_status
      # somehow this returns error code 25 when the primary is unreachable
      failed_when: ( cluster_status.rc not in [0, 25] )
      changed_when: false

      # TODO: check that primary says "unreachable"?
    - name: Print cluster status
      ansible.builtin.debug:
        msg:
          - "{{ cluster_status.stdout_lines }}"
          - "{{ cluster_status.stderr_lines }}"

    - name: Dry run of standby promotion
      ansible.builtin.command: repmgr standby promote --dry-run
      become: true
      become_user: postgres
      changed_when: false
      register: dry_run_promote

    - name: Print result of dry-run
      ansible.builtin.debug:
        msg:
          - "{{ dry_run_promote.stdout_lines }}"
          - "{{ dry_run_promote.stderr_lines }}"

    # TODO: should postgres service be restarted?
    # TODO: check that primary says "failed"?
    - name: Promote standby
      ansible.builtin.command: repmgr standby promote
      become: true
      become_user: postgres
      changed_when: true

    # TODO: should this happen before or after rejoining the old primary?
    # TODO: should this be done immediately after promoting the standby?
    - name: Start LARD ingestion service
      ansible.builtin.systemd_service:
        daemon_reload: true
        name: lard_ingestion
        state: restarted
        enabled: true
      become: true

- name: Rejoin
  tags: rejoin
  when: inventory_hostname == failover_old
  block:
    - name: Stop postgres service
      ansible.builtin.systemd_service:
        name: postgresql
        state: stopped
      become: true

    - name: Dry run of rejoin
      ansible.builtin.command: >
        repmgr node rejoin
        -d 'host='{{ hostvars[failover_new].ansible_host }}' user=repmgr dbname=repmgr connect_timeout=2'
        --force-rewind
        --verbose
        --dry-run
      become: true
      become_user: postgres
      register: dry_run_results
      changed_when: false # dry run does not change status

    - name: Print out the rejoin dry-run results
      ansible.builtin.debug:
        msg:
          - "{{ dry_run_results.stdout_lines }}"
          - "{{ dry_run_results.stderr_lines }}"

    # TODO: add changed_when to fix lint? Need to figure out what the output of the command looks like
    # Or is it always changed_when: true?
    - name: Rejoin old primary as standby
      ansible.builtin.command: >
        repmgr node rejoin
        -d 'host='{{ hostvars[failover_new].ansible_host }}' user=repmgr dbname=repmgr connect_timeout=2'
        --force-rewind
        --verbose
      become: true
      become_user: postgres
      register: node_rejoin_results
      changed_when: true

    - name: Print out the rejoin results
      ansible.builtin.debug:
        msg:
          - "{{ node_rejoin_results.stdout_lines }}"
          - "{{ node_rejoin_results.stderr_lines }}"

    - name: Start postgres service
      ansible.builtin.systemd_service:
        name: postgresql
        state: started
      become: true

    - name: Check cluster
      ansible.builtin.command: repmgr cluster show
      become: true
      become_user: postgres
      register: cluster_status
      failed_when: ( cluster_status.rc not in [0, 25] )
      changed_when: false # cluster show does not modify status of the host

    - name: Print out the status_results
      ansible.builtin.debug:
        msg:
          - "{{ cluster_status.stdout_lines }}"
          - "{{ cluster_status.stderr_lines }}"
