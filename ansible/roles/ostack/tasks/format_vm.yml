---
- name: Get port info
  openstack.cloud.port_info:
    cloud: '{{ ostack_cloud }}'
    region_name: '{{ ostack_region }}'
    port: 'ipalias-{{ inventory_hostname }}'
  register: ipalias_port
  delegate_to: localhost

- name: Print out the port information
  ansible.builtin.debug:
    msg: "Port {{ lookup('ansible.builtin.dict', ipalias_port) }}"
  tags: [never, debug]

# TODO: is this configuration bogging down external connections to the standby?
- name: Set IP alias netplan configuration
  ansible.builtin.set_fact:
    netplan_config:
      network:
        version: 2
        ethernets:
          ens6:
            dhcp4: true
            dhcp4-overrides:
              use-routes: false
            match:
              macaddress: '{{ ipalias_port.ports.0.mac_address }}'
            set-name: ens6
            routes:
              - to: 0.0.0.0/0
                via: '{{ ostack_ipalias_network_cidr | ansible.utils.ipaddr("net") | ansible.utils.ipaddr("1") | ansible.utils.ipaddr("address") }}'
                table: 102
            routing-policy:
              - from: '{{ ostack_ipalias_network_cidr }}'
                table: 102

- name: Copy out ipalias netplan config
  ansible.builtin.copy:
    content: '{{ netplan_config | to_nice_yaml }}'
    dest: /etc/netplan/90-ansible-ipalias.yaml
    mode: '0644'
  register: netplan_config
  become: true

- name: Print out netplan config
  ansible.builtin.debug:
    msg: "Netplan {{ netplan_config }}"
    # https://gitlab.met.no/ansible-roles/ipalias/-/blob/master/tasks/netplan.yml?ref_type=heads
    # this times out and then the servers are uncreachable?
    #  - name: Reboot server to apply new netplan config, without hitting netplan bug
    #    ansible.builtin.reboot:  # noqa no-handler
    #  reboot_timeout: 3600
    #    when: netplan_config is changed
    #    become: true
  tags: [never, debug]

- name: Apply netplan
  ansible.builtin.command: sudo netplan apply
  async: 45
  poll: 0
  register: netplan_output
  # TODO: need to check output of netplan apply to determine
  # changed_when condition
  changed_when: true

- name: Create mount point
  ansible.builtin.file:
    path: "{{ ostack_mount_point }}"
    state: directory
    owner: ubuntu # change to postgres?
    group: ubuntu # change to postgres?
    mode: '0755'
  become: true

- name: Create ext4 filesystem on mount device
  community.general.filesystem:
    dev: "{{ ostack_mount_device }}"
    fstype: ext4
  become: true

- name: Read device information (always use unit when probing)
  community.general.parted:
    device: "{{ ostack_mount_device }}"
    unit: MiB
  register: sdb_info
  become: true

- name: Print out the device information
  ansible.builtin.debug:
    msg: "Partitions {{ sdb_info.partitions }}"
  tags: [never, debug]

# this also changes the fstab so its still there when rebooted!
- name: Mount the device on the mount point
  ansible.posix.mount:
    path: "{{ ostack_mount_point }}"
    src: "{{ ostack_mount_device }}"
    fstype: ext4
    state: mounted
  become: true

- name: Fetch the UUID of mounted device
  ansible.builtin.command: blkid --match-tag UUID --output value '{{ ostack_mount_device }}'
  changed_when: false
  register: blkid_cmd
  become: true
  tags: [never, debug]

- name: Print out the UUID
  ansible.builtin.debug:
    msg: "UUID {{ blkid_cmd.stdout }}"
  tags: [never, debug]
