
# set up a role and provide suitable entries in pg_hba.conf with the database field set to replication

# ensure max_wal_senders is set to a sufficiently large value in the conf file (also possibly max_replication_slots?)
# When running a standby server, you must set this parameter to the same or higher value than on the primary server. Otherwise, queries will not be allowed in the standby server.

# set wal_keep_size to a value large enough to ensure that WAL segments are not recycled too early, or configure a replication slot for the standby?
# if there is a WAL archive accessible to the standby this may not be needed?

# On systems that support the keepalive socket option, setting tcp_keepalives_idle, tcp_keepalives_interval and tcp_keepalives_count helps the primary promptly notice a broken connection.

#example auth
# Allow the user "foo" from host 192.168.1.100 to connect to the primary
# as a replication standby if the user's password is correctly supplied.
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
#host    replication     foo             192.168.1.100/32        md5

# create replication slot example:
#postgres=# SELECT * FROM pg_create_physical_replication_slot('node_a_slot');
#  slot_name  | lsn
#-------------+-----
# node_a_slot |

#postgres=# SELECT slot_name, slot_type, active FROM pg_replication_slots;
#  slot_name  | slot_type | active
#-------------+-----------+--------
# node_a_slot | physical  | f
#(1 row)
---
- name: Register VMs to work on
  vars:
    ostack_state: present
    ostack_region: "{{'Ostack2-EXT' if (ostack2) else 'ext'}}"

  hosts: localhost
  gather_facts: false
  tasks:
    - name: Add ubuntu Instance to Inventory
      ansible.builtin.add_host:
        name: '{{ vm_ip }}'
        groups: servers

- name: Create a primary from empty postgres 
  hosts: servers
  remote_user: ubuntu
  tasks:
    - name: Create a new database with name lard
      community.postgresql.postgresql_db:
        name: lard
      become: true
      become_user: postgres

    - name: Copy the db folder to the remote
      ansible.builtin.copy:
        src: ../../db/
        dest: /etc/postgresql/16/db/
      become: true
        
    - name: Create the public schema in lard
      community.postgresql.postgresql_script:
        db: lard
        path: /etc/postgresql/16/db/public.sql
      become: true
      become_user: postgres        

    - name: Create the labels schema in lard
      community.postgresql.postgresql_script:
        db: lard
        path: /etc/postgresql/16/db/labels.sql
      become: true
      become_user: postgres

    - name: Connect to lard database, create user
      community.postgresql.postgresql_user:
        db: lard
        name: lard_user
        password: '{{ db_password }}'
        role_attr_flags: SUPERUSER # not desired, but the privelege granting doesn't seem to work?
      become: true
      become_user: postgres

    # - name: Grant lard_user priveleges on lard database
    #   community.postgresql.postgresql_privs:
    #     type: database
    #     db: lard
    #     privs: ALL
    #     role: lard_user
    #   become: true
    #   become_user: postgres

    # MAKE IT THE PRIMARY
    - name: Set wal_level parameter
      community.postgresql.postgresql_set:
        name: wal_level
        value: replica # https://www.postgresql.org/docs/current/runtime-config-wal.html#GUC-WAL-LEVEL
      become: true
      become_user: postgres
    - name: Set hot_standby parameter
      community.postgresql.postgresql_set:
        name: hot_standby
        value: on
      become: true
      become_user: postgres
    - name: Set hot_standby_feedback parameter
      community.postgresql.postgresql_set:
        name: hot_standby_feedback
        value: on
      become: true
      become_user: postgres
    - name: Set max_wal_senders parameter
      community.postgresql.postgresql_set:
        name: max_wal_senders
        value: 10
      become: true
      become_user: postgres
    - name: Set max_replication_slots parameter
      community.postgresql.postgresql_set:
        name: max_replication_slots
        value: 10
      become: true
      become_user: postgres

    # repmgr
    # https://www.repmgr.org/docs/current/quickstart-repmgr-conf.html
    - name: Create a repmgr.conf if it does not exist
      ansible.builtin.file:
        path: /etc/repmgr.conf
        state: touch
        mode: '0755'
      become: true
    - name: Set contents of repmgr.conf
      ansible.builtin.copy:
        dest: "/etc/repmgr.conf"
        content: |
          node_id=1
          node_name='{{ name_stuff }}'
          conninfo='host={{ vm_ip }} user=repmgr dbname=repmgr connect_timeout=2'
          data_directory='/mnt/ssd-b/16/main'
      become: true

    # https://www.repmgr.org/docs/current/quickstart-primary-register.html
    - name: Run repmgr to register the primary
      ansible.builtin.command: repmgr -f /etc/repmgr.conf primary register
      become: true
      become_user: postgres
      register: register_primary_results
    - name: Print out the register_primary_results
      ansible.builtin.debug:
        msg: "repmgr {{ register_primary_results }}"

    # # STUFF FOR REPLICATION (do not need if using repmgr)
    # - name: Create replicator user with replication priveleges
    #   community.postgresql.postgresql_user:
    #     name: replicator
    #     password: '{{ replicator_password }}'
    #     role_attr_flags: REPLICATION
    #   become: true
    #   become_user: postgres

    # # also specifically allow the replicator user
    # - name: Change hba conf to allow replicator to connect
    #   community.postgresql.postgresql_pg_hba:
    #     dest: /etc/postgresql/16/main/pg_hba.conf
    #     databases: replication
    #     contype: host
    #     users: replicator
    #     #address: all
    #     address: '{{ standby_host }}'
    #     method: trust # seems to hang with md5, how to make auth work?
    #   become: true

    # # create replication slot
    # - name: Create physical replication slot if doesn't exist
    #   become_user: postgres
    #   community.postgresql.postgresql_slot:
    #     slot_name: replication_slot
    #     #db: lard
    #   become: true

    # make sure these changes take effect?
    - name: Restart service postgres
      ansible.builtin.systemd_service:
        name: postgresql
        state: restarted
      become: true
      