- name: Register VMs to work on
  vars:
    ostack_state: present
    ostack_region: "{{'Ostack2-EXT' if (ostack2) else 'ext'}}"

  hosts: localhost
  gather_facts: false
  tasks:
    - name: Add ubuntu Instance to Inventory
      ansible.builtin.add_host:
        name: '{{ vm1_ip }}'
        groups: servers

- name: Make it so the VMs can ssh to each other
  hosts: servers
  remote_user: ubuntu
  tasks:
    - name: Create user postgres
      ansible.builtin.user:
        name: postgres
        generate_ssh_key: true
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa
        force: true
      register: ssh_keys
      become: true
    # Another way to generate a ssh key...
    # - name: Force regenerate an OpenSSH keypair if it already exists
    #  community.crypto.openssh_keypair:
    #    path: .ssh/id_rsa
    #    force: true
    #    owner: postgres # should be this user's key
    #  register: ssh_keys
    #  become: true

    - name: List generated SSH key
      ansible.builtin.debug:
        msg: "{{ ssh_keys.ssh_public_key }}"

    - name: Add the key to authorized_key on the other vm
      ansible.posix.authorized_key:
        user: postgres
        state: present
        key: '{{ ssh_keys.ssh_public_key }}'
      become: true
      delegate_to: '{{ vm2_ip }}'

    - name: Get the host key
      ansible.builtin.set_fact:
        hostkey: '{{ ansible_ssh_host_key_ecdsa_public }}'

    - name: List host key
      ansible.builtin.debug:
        msg: "{{ hostkey }}"

    - name: Add the vm to known_hosts on the other vm
      ansible.builtin.known_hosts:
        path: ~postgres/.ssh/known_hosts # need this for the postgres user
        name: '{{ vm1_ip }}'
        key: '{{ vm1_ip }} ecdsa-sha2-nistp256 {{ hostkey }}'
        state: present
      become: true
      delegate_to: '{{ vm2_ip }}'
