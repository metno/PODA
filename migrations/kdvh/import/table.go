package port

import (
	kdvh "migrate/kdvh/db"
	"migrate/lard"
)

// Functions that try to recover the original pair of `controlinfo` and `useinfo` (see `flags.go`)
// generated by Kvalobs for an observation, based on `KdvhObs.Flags` and `KdvhObs.Data`
// Different KDVH tables need different ways to perform this conversion.
//
// It returns three structs for each of the LARD tables we are inserting into
type ConvertFunction func(*kdvh.Obs, *kdvh.TsInfo) (lard.DataObs, lard.TextObs, lard.Flag, error)
type Table struct {
	TableName     string          // Name of the DATA table
	FlagTableName string          // Name of the FLAG table
	ElemTableName string          // Name of the ELEM table
	Convert       ConvertFunction // How to dump a given combo of (element, station) for the given table
	ImportUntil   int
}

func NewTable(data, flag, elem string, fn ConvertFunction, year int) *Table {
	return &Table{
		TableName:     data,
		FlagTableName: flag,
		ElemTableName: elem,
		Convert:       fn,
		ImportUntil:   year,
	}
}

func InitImportTables() []*Table {
	return []*Table{
		NewTable("T_EDATA", "T_EFLAG", "T_ELEM_EDATA", convertEdata, 3000),
		NewTable("T_METARDATA", "", "T_ELEM_FDATA", convert, 3000),
		NewTable("T_ADATA", "T_AFLAG", "T_ELEM_OBS", convert, 2006),
		NewTable("T_MDATA", "T_MFLAG", "T_ELEM_OBS", convert, 2006),
		NewTable("T_TJ_DATA", "T_TJ_FLAG", "T_ELEM_OBS", convert, 2006),
		NewTable("T_PDATA", "T_PFLAG", "T_ELEM_OBS", convertPdata, 2006),
		NewTable("T_NDATA", "T_NFLAG", "T_ELEM_OBS", convertNdata, 2006),
		NewTable("T_VDATA", "T_VFLAG", "T_ELEM_OBS", convertVdata, 2006),
		NewTable("T_UTLANDDATA", "T_UTLANDFLAG", "T_ELEM_OBS", convert, 2006),
		NewTable("T_MONTH", "T_MONTH_FLAG", "T_ELEM_MONTH", convertProduct, 1957),
		NewTable("T_DIURNAL", "T_DIURNAL_FLAG", "T_ELEM_DIURNAL", convertProduct, 2006),
		// NewTable("T_HOMOGEN_DIURNAL", "", "T_ELEM_HOMOGEN_MONTH", convertProduct, 0),
		// NewTable("T_HOMOGEN_MONTH", "", "T_ELEM_HOMOGEN_MONTH", convertProduct, 0),
		// NewTable("T_DIURNAL_INTERPOLATED", "", "T_ELEM_DIURNAL", convertDiurnalInterpolated, 0),
	}
}
