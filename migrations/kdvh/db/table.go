package db

import (
	"github.com/jackc/pgx/v5/pgxpool"

	"migrate/lard"
)

// In KDVH for each table name we usually have three separate tables:
// 1. A DATA table containing observation values;
// 2. A FLAG table containing quality control (QC) flags;
// 3. A ELEM table containing metadata about the validity of the timeseries.
//
// DATA and FLAG tables have the same schema:
// | dato | stnr | ... |
// where 'dato' is the timestamp of the observation, 'stnr' is the station
// where the observation was measured, and '...' is a varying number of columns
// each with different observations, where the column name is the 'elem_code'
// (e.g. for air temperature, 'ta').
//
// The ELEM tables have the following schema:
// | stnr | elem_code | fdato | tdato | table_name | flag_table_name | audit_dato

// This struct contains basic metadata for a KDVH table
type Table struct {
	TableName     string // Name of the DATA table
	FlagTableName string // Name of the FLAG table
	ElemTableName string // Name of the ELEM table
	Path          string // Directory name of where the dumped table is stored
	importUntil   int    // Import data only until the year specified by this field. Table import will be skipped, if `SetImportYear` is not called.
	DumpFn        DumpFunction
	Convert       ConvertFunction
}

// Creates default Table
func NewTable(data, flag, elem string) *Table {
	return &Table{
		TableName:     data,
		FlagTableName: flag,
		ElemTableName: elem,
		// NOTE: '_combined' kept for backward compatibility with original scripts
		Path:    data + "_combined",
		DumpFn:  dumpDataAndFlags,
		Convert: convert,
	}
}

// Function used to dump the KDVH table, see below
type DumpFunction func(path string, args dumpArgs, logStr string, overwrite bool, pool *pgxpool.Pool) error
type dumpArgs struct {
	element   string
	station   string
	dataTable string
	flagTable string
}

// Functions that try to recover the original pair of `controlinfo` and `useinfo` (see `flags.go`)
// generated by Kvalobs for an observation, based on `KdvhObs.Flags` and `KdvhObs.Data`
// Different KDVH tables need different ways to perform this conversion.
//
// It returns three structs for each of the LARD tables we are inserting into
type ConvertFunction func(*KdvhObs, *TsInfo) (lard.DataObs, lard.TextObs, lard.Flag, error)

func (t *Table) Dump(path, element, station, logStr string, overwrite bool, pool *pgxpool.Pool) error {
	return t.DumpFn(path, dumpArgs{element, station, t.TableName, t.FlagTableName}, logStr, overwrite, pool)
}

func (t *Table) SetDumpFunc(fn DumpFunction) *Table {
	t.DumpFn = fn
	return t
}

func (t *Table) SetConvertFunc(fn ConvertFunction) *Table {
	t.Convert = fn
	return t
}

func (t *Table) SetImportYear(year int) *Table {
	if year > 0 {
		t.importUntil = year
	}
	return t
}

func (t *Table) ShouldImport() bool {
	return t.importUntil > 0
}

func (t *Table) MaxImportYearReached(year int) bool {
	return t.importUntil < 0 || year >= t.importUntil
}
